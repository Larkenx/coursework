1) The output for FREQUENTWORDS("GAGTTAACGAACGCTTAAC", 3) will be "AAC"
since it appears 3 times, versus three other 3-mers which appear twice.

2) The run time for for Computing Frequencies is roughly (4^k) + (|Text| - k).
It is faster than frequentwords when k is smaller.

3) Mr Fuzzy's double-nested for loop is good because we are iterating through all the
characters of both P and all the possible letters of A, then replacing the letters
of Q (a tmp copy of P) at every character. The only issue is that Q is never initialized
back to P at the end of each loop, so after we add Q into S, we should re-init the variable like:
  Q<-P
This should make it so that we don't accidentally overwrite the original string. This function is instead
returning every possible combination, not every possible permutation

4)
HammingStrings(P, d)
    Initialize S <- empty set
    Init result <- empty set
    for i <- 0 to |P|
        for j <- 0 to |P| // For each nucleotide
            S <- Substring(P,i, j) // Grab all the permutations
    for (String : S)
        for (OtherString : S)
            if (Distance(S, OtherString) == d) && (S != OtherString)
                result <- S
                result <- OtherString
    output result

My runtime would be |P|^2, since we iterate through P twice, then we go through all the strings we grabbed
which would be 2*|P|^2. So in all it would be 3*|P|^2.

5) Palindromes(Text, k)
    for i <- 0 to |Text| - k
        String curr = Substring(Text, i, k) // Grab the substring
        String tmp = Reverse(curr) // Reverses string
        Complement(tmp) // Converts all nucleotides to its complement (e.g. A->T, G->C)
        if (tmp == curr)
            print(curr)

    The run time for Palindromes would be (|Text| - k)*k^2, since we first have to iterate through the |Text| - k. We have to iterate
    through the substring of Text k number of times for the reverse and complement functions. substring should be fast since it would
    be a native function of the programming language. So, it would be O(n^3) since all in all we are iterating through the string 3 times.


6) You can tell where the replication origin is by looking at where the skew changes
a negative to positive slope (the global minimum). We know this because the skew diagram
shows us the difference between G & C nucleotides, and the oriC is where we find the greatest
difference. Also, since bacterial genomes are circular, the last position on a skew diagram flows directly
over into the beginning position for the skew diagram.

7)
    a) Our Profile(Motifs) would be the following: (Done by hand)
        A:  0 .5 .5 .3 .1 .3 1 .8 0 .2
        C: .5  0 .4 .4  0  0 0  0 0 .2
        G: .2 .5 .1 .1 .2 .6 0 .1 0  0
        T: .3  0  0 .2 .7 .1 0 .1 1 .6

    b) The entropy for the Profile(Motifs) is: 10.437998872369421.
    I calculated this using a java program included at the bottom of this file.

    c)  The sequence "CAAATTATTT" has a Pr(S0|profile) equal to .5*.5*.5*.3*.7*.1*1*.1*1*.6 = 0.0001575.

class Entropy {
    static double[] profiles = { 0, 0.5, 0.2, 0.3, 0.5, 0, 0.5, 0, 0.5, 0.4, 0.1, 0, 0.3, 0.4, 0.1, 0.2, 0.1, 0, 0.2, 0.7, 0.3, 0, 0.6, 0.1, 1, 0, 0, 0, 0.8, 0, 0.1, 0.1, 0, 0, 0, 1, 0.2, 0.2, 0, 0.6};
    public static void main(String[] args) {
        double sum = 0;
        for (int i = 0; i < 40; i++) {
            double rowResult = 0;
            double val = profiles[i];
            System.out.println(val * (Math.log(val) / Math.log(2)));
            if (val != 0)
                sum += val * (Math.log(val) / Math.log(2));
        }
        System.out.println(-1 * sum);
    }
}
